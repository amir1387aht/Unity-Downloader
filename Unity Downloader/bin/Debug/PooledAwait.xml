<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PooledAwait</name>
    </assembly>
    <members>
        <member name="T:PooledAwait.AwaitableExtensions">
            <summary>
            Provides async/await-related extension methods
            </summary>
        </member>
        <member name="M:PooledAwait.AwaitableExtensions.ConfigureAwait(System.Runtime.CompilerServices.YieldAwaitable,System.Boolean)">
            <summary>Controls whether a yield operation should respect captured context</summary>
        </member>
        <member name="T:PooledAwait.ConfiguredYieldAwaitable">
            <summary>Provides an awaitable context for switching into a target environment.</summary>
        </member>
        <member name="M:PooledAwait.ConfiguredYieldAwaitable.Equals(System.Object)">
            <summary><see cref="M:System.Object.Equals(System.Object)"/></summary>
        </member>
        <member name="M:PooledAwait.ConfiguredYieldAwaitable.GetHashCode">
            <summary><see cref="M:System.Object.GetHashCode"/></summary>
        </member>
        <member name="M:PooledAwait.ConfiguredYieldAwaitable.ToString">
            <summary><see cref="M:System.Object.ToString"/></summary>
        </member>
        <member name="M:PooledAwait.ConfiguredYieldAwaitable.GetAwaiter">
            <summary>Gets an awaiter for this <see cref="T:PooledAwait.ConfiguredYieldAwaitable"/>.</summary>
        </member>
        <member name="T:PooledAwait.ConfiguredYieldAwaitable.ConfiguredYieldAwaiter">
            <summary>Provides an awaitable context for switching into a target environment.</summary>
        </member>
        <member name="M:PooledAwait.ConfiguredYieldAwaitable.ConfiguredYieldAwaiter.Equals(System.Object)">
            <summary><see cref="M:System.Object.Equals(System.Object)"/></summary>
        </member>
        <member name="M:PooledAwait.ConfiguredYieldAwaitable.ConfiguredYieldAwaiter.GetHashCode">
            <summary><see cref="M:System.Object.GetHashCode"/></summary>
        </member>
        <member name="M:PooledAwait.ConfiguredYieldAwaitable.ConfiguredYieldAwaiter.ToString">
            <summary><see cref="M:System.Object.ToString"/></summary>
        </member>
        <member name="P:PooledAwait.ConfiguredYieldAwaitable.ConfiguredYieldAwaiter.IsCompleted">
            <summary>Gets whether a yield is not required.</summary>
        </member>
        <member name="M:PooledAwait.ConfiguredYieldAwaitable.ConfiguredYieldAwaiter.GetResult">
            <summary>Ends the await operation.</summary>
        </member>
        <member name="M:PooledAwait.ConfiguredYieldAwaitable.ConfiguredYieldAwaiter.OnCompleted(System.Action)">
            <summary>Posts the <paramref name="continuation"/> back to the current context.</summary>
        </member>
        <member name="M:PooledAwait.ConfiguredYieldAwaitable.ConfiguredYieldAwaiter.UnsafeOnCompleted(System.Action)">
            <summary>Posts the <paramref name="continuation"/> back to the current context.</summary>
        </member>
        <member name="T:PooledAwait.FireAndForget">
            <summary>
            Represents an operation that completes at the first incomplete await,
            with the remainder continuing in the background
            </summary>
        </member>
        <member name="M:PooledAwait.FireAndForget.Equals(System.Object)">
            <summary><see cref="M:System.Object.Equals(System.Object)"/></summary>
        </member>
        <member name="M:PooledAwait.FireAndForget.GetHashCode">
            <summary><see cref="M:System.Object.GetHashCode"/></summary>
        </member>
        <member name="M:PooledAwait.FireAndForget.ToString">
            <summary><see cref="M:System.Object.ToString"/></summary>
        </member>
        <member name="E:PooledAwait.FireAndForget.Exception">
            <summary>
            Raised when exceptions occur on fire-and-forget methods
            </summary>
        </member>
        <member name="M:PooledAwait.FireAndForget.AsValueTask">
            <summary>
            Gets the instance as a value-task
            </summary>
        </member>
        <member name="M:PooledAwait.FireAndForget.AsTask">
            <summary>
            Gets the instance as a task
            </summary>
        </member>
        <member name="M:PooledAwait.FireAndForget.op_Implicit(PooledAwait.FireAndForget)~System.Threading.Tasks.Task">
            <summary>
            Gets the instance as a task
            </summary>
        </member>
        <member name="M:PooledAwait.FireAndForget.op_Implicit(PooledAwait.FireAndForget)~System.Threading.Tasks.ValueTask">
            <summary>
            Gets the instance as a value-task
            </summary>
        </member>
        <member name="M:PooledAwait.FireAndForget.GetAwaiter">
            <summary>
            Gets the awaiter for the instance
            </summary>
        </member>
        <member name="T:PooledAwait.IResettable">
            <summary>
            Indicates that an object can be reset
            </summary>
        </member>
        <member name="M:PooledAwait.IResettable.Reset">
            <summary>
            Resets this instance
            </summary>
        </member>
        <member name="T:PooledAwait.LazyTaskCompletionSource">
            <summary>
            Like a ValueTaskCompletionSource, but the actual task will only become allocated
            if the .Task is consumed; this is useful for APIs where the consumer *may* consume a task
            </summary>
        </member>
        <member name="P:PooledAwait.LazyTaskCompletionSource.CompletedTask">
            <summary>
            A global LazyTaskCompletionSource that represents a completed operation
            </summary>
        </member>
        <member name="P:PooledAwait.LazyTaskCompletionSource.CanceledTask">
            <summary>
            A global LazyTaskCompletionSource that represents a cancelled operation
            </summary>
        </member>
        <member name="M:PooledAwait.LazyTaskCompletionSource.Equals(System.Object)">
            <summary><see cref="M:System.Object.Equals(System.Object)"/></summary>
        </member>
        <member name="M:PooledAwait.LazyTaskCompletionSource.GetHashCode">
            <summary><see cref="M:System.Object.GetHashCode"/></summary>
        </member>
        <member name="M:PooledAwait.LazyTaskCompletionSource.ToString">
            <summary><see cref="M:System.Object.ToString"/></summary>
        </member>
        <member name="P:PooledAwait.LazyTaskCompletionSource.Task">
            <summary>
            Gets the task associated with this instance
            </summary>
        </member>
        <member name="M:PooledAwait.LazyTaskCompletionSource.Create">
            <summary>
            Create a new instance; this instance should be disposed when it is known to be unwanted
            </summary>
        </member>
        <member name="M:PooledAwait.LazyTaskCompletionSource.TrySetResult">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.LazyTaskCompletionSource.TrySetCanceled(System.Threading.CancellationToken)">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.LazyTaskCompletionSource.SetResult">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.LazyTaskCompletionSource.SetCanceled(System.Threading.CancellationToken)">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.LazyTaskCompletionSource.TrySetException(System.Exception)">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.LazyTaskCompletionSource.SetException(System.Exception)">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.LazyTaskCompletionSource.Dispose">
            <summary>
            Release all resources associated with this operation
            </summary>
        </member>
        <member name="P:PooledAwait.LazyTaskCompletionSource.IsNull">
            <summary>
            Indicates whether this is an invalid default instance
            </summary>
        </member>
        <member name="T:PooledAwait.LazyTaskCompletionSource`1">
            <summary>
            Like a ValueTaskCompletionSource<typeparamref name="T"/>, but the actual task will only become allocated
            if the .Task is consumed; this is useful for APIs where the consumer *may* consume a task
            </summary>
        </member>
        <member name="M:PooledAwait.LazyTaskCompletionSource`1.Equals(System.Object)">
            <summary><see cref="M:System.Object.Equals(System.Object)"/></summary>
        </member>
        <member name="M:PooledAwait.LazyTaskCompletionSource`1.GetHashCode">
            <summary><see cref="M:System.Object.GetHashCode"/></summary>
        </member>
        <member name="M:PooledAwait.LazyTaskCompletionSource`1.ToString">
            <summary><see cref="M:System.Object.ToString"/></summary>
        </member>
        <member name="P:PooledAwait.LazyTaskCompletionSource`1.Task">
            <summary>
            Gets the task associated with this instance
            </summary>
        </member>
        <member name="M:PooledAwait.LazyTaskCompletionSource`1.Create">
            <summary>
            Create a new instance; this instance should be disposed when it is known to be unwanted
            </summary>
        </member>
        <member name="M:PooledAwait.LazyTaskCompletionSource`1.CreateConstant(`0)">
            <summary>
            Create a new instance; this instance will never by recycled
            </summary>
        </member>
        <member name="P:PooledAwait.LazyTaskCompletionSource`1.CanceledTask">
            <summary>
            A global LazyTaskCompletionSource that represents a cancelled operation
            </summary>
        </member>
        <member name="M:PooledAwait.LazyTaskCompletionSource`1.TrySetResult(`0)">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.LazyTaskCompletionSource`1.SetResult(`0)">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.LazyTaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.LazyTaskCompletionSource`1.SetCanceled(System.Threading.CancellationToken)">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.LazyTaskCompletionSource`1.TrySetException(System.Exception)">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.LazyTaskCompletionSource`1.SetException(System.Exception)">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.LazyTaskCompletionSource`1.Dispose">
            <summary>
            Release all resources associated with this operation
            </summary>
        </member>
        <member name="P:PooledAwait.LazyTaskCompletionSource`1.IsNull">
            <summary>
            Indicates whether this is an invalid default instance
            </summary>
        </member>
        <member name="T:PooledAwait.MethodBuilders.FireAndForgetMethodBuilder">
            <summary>
            This type is not intended for direct usage
            </summary>
        </member>
        <member name="T:PooledAwait.MethodBuilders.PooledTaskMethodBuilder">
            <summary>
            This type is not intended for direct usage
            </summary>
        </member>
        <member name="T:PooledAwait.MethodBuilders.PooledTaskMethodBuilder`1">
            <summary>
            This type is not intended for direct usage
            </summary>
        </member>
        <member name="T:PooledAwait.MethodBuilders.PooledValueTaskMethodBuilder">
            <summary>
            This type is not intended for direct usage
            </summary>
        </member>
        <member name="T:PooledAwait.MethodBuilders.PooledValueTaskMethodBuilder`1">
            <summary>
            This type is not intended for direct usage
            </summary>
        </member>
        <member name="T:PooledAwait.Pool">
            <summary>
            Utility methods for boxing value types efficiently, in particular for
            avoid boxes and capture contexts in callbacks
            </summary>
        </member>
        <member name="M:PooledAwait.Pool.TryRent``1">
            <summary>
            Gets an instance from the pool if possible
            </summary>
        </member>
        <member name="M:PooledAwait.Pool.Return``1(``0)">
            <summary>
            Puts an instance back into the pool
            </summary>
        </member>
        <member name="M:PooledAwait.Pool.Box``1(``0@)">
            <summary>
            Wraps a value-type into a boxed instance, using an object pool;
            consider using value-tuples in particular
            </summary>
        </member>
        <member name="M:PooledAwait.Pool.UnboxAndReturn``1(System.Object)">
            <summary>
            Unwraps a value-type from a boxed instance and recycles
            the instance, which should not be touched again
            </summary>
        </member>
        <member name="T:PooledAwait.PooledTask">
            <summary>
            A Task, but with a custom builder
            </summary>
        </member>
        <member name="M:PooledAwait.PooledTask.Equals(System.Object)">
            <summary><see cref="M:System.Object.Equals(System.Object)"/></summary>
        </member>
        <member name="M:PooledAwait.PooledTask.GetHashCode">
            <summary><see cref="M:System.Object.GetHashCode"/></summary>
        </member>
        <member name="M:PooledAwait.PooledTask.ToString">
            <summary><see cref="M:System.Object.ToString"/></summary>
        </member>
        <member name="M:PooledAwait.PooledTask.AsTask">
            <summary>
            Gets the instance as a task
            </summary>
        </member>
        <member name="M:PooledAwait.PooledTask.op_Implicit(PooledAwait.PooledTask@)~System.Threading.Tasks.Task">
            <summary>
            Gets the instance as a task
            </summary>
        </member>
        <member name="M:PooledAwait.PooledTask.GetAwaiter">
            <summary>
            Gets the awaiter for the task
            </summary>
        </member>
        <member name="M:PooledAwait.PooledTask.ConfigureAwait(System.Boolean)">
            <summary>
            Gets the configured awaiter for the task
            </summary>
        </member>
        <member name="P:PooledAwait.PooledTask.IsNull">
            <summary>
            Indicates whether this is an invalid default instance
            </summary>
        </member>
        <member name="T:PooledAwait.PooledTask`1">
            <summary>
            A Task<typeparamref name="T"/>, but with a custom builder
            </summary>
        </member>
        <member name="M:PooledAwait.PooledTask`1.Equals(System.Object)">
            <summary><see cref="M:System.Object.Equals(System.Object)"/></summary>
        </member>
        <member name="M:PooledAwait.PooledTask`1.GetHashCode">
            <summary><see cref="M:System.Object.GetHashCode"/></summary>
        </member>
        <member name="M:PooledAwait.PooledTask`1.ToString">
            <summary><see cref="M:System.Object.ToString"/></summary>
        </member>
        <member name="M:PooledAwait.PooledTask`1.AsTask">
            <summary>
            Gets the instance as a task
            </summary>
        </member>
        <member name="M:PooledAwait.PooledTask`1.op_Implicit(PooledAwait.PooledTask{`0}@)~System.Threading.Tasks.Task{`0}">
            <summary>
            Gets the instance as a task
            </summary>
        </member>
        <member name="M:PooledAwait.PooledTask`1.GetAwaiter">
            <summary>
            Gets the awaiter for the task
            </summary>
        </member>
        <member name="M:PooledAwait.PooledTask`1.ConfigureAwait(System.Boolean)">
            <summary>
            Gets the configured awaiter for the task
            </summary>
        </member>
        <member name="P:PooledAwait.PooledTask`1.IsNull">
            <summary>
            Indicates whether this is an invalid default instance
            </summary>
        </member>
        <member name="T:PooledAwait.PooledValueTask">
            <summary>
            A ValueTask with a custom source and builder
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTask.Equals(System.Object)">
            <summary><see cref="M:System.Object.Equals(System.Object)"/></summary>
        </member>
        <member name="M:PooledAwait.PooledValueTask.GetHashCode">
            <summary><see cref="M:System.Object.GetHashCode"/></summary>
        </member>
        <member name="M:PooledAwait.PooledValueTask.ToString">
            <summary><see cref="M:System.Object.ToString"/></summary>
        </member>
        <member name="M:PooledAwait.PooledValueTask.AsValueTask">
            <summary>
            Gets the instance as a value-task
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTask.op_Implicit(PooledAwait.PooledValueTask@)~System.Threading.Tasks.ValueTask">
            <summary>
            Gets the instance as a value-task
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTask.GetAwaiter">
            <summary>
            Gets the awaiter for the task
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTask.ConfigureAwait(System.Boolean)">
            <summary>
            Gets the configured awaiter for the task
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTask.CreateSource">
            <summary>
            Rents a task-source that will be recycled when the task is awaited
            </summary>
        </member>
        <member name="P:PooledAwait.PooledValueTask.IsNull">
            <summary>
            Indicates whether this is an invalid default instance
            </summary>
        </member>
        <member name="T:PooledAwait.PooledValueTaskSource">
            <summary>
            A task-source that automatically recycles when the task is awaited
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTaskSource.Equals(System.Object)">
            <summary><see cref="M:System.Object.Equals(System.Object)"/></summary>
        </member>
        <member name="M:PooledAwait.PooledValueTaskSource.GetHashCode">
            <summary><see cref="M:System.Object.GetHashCode"/></summary>
        </member>
        <member name="M:PooledAwait.PooledValueTaskSource.ToString">
            <summary><see cref="M:System.Object.ToString"/></summary>
        </member>
        <member name="P:PooledAwait.PooledValueTaskSource.Task">
            <summary>
            Gets the task that corresponds to this instance; it can only be awaited once
            </summary>
        </member>
        <member name="P:PooledAwait.PooledValueTaskSource.HasTask">
            <summary>
            Indicates whether this instance is well-defined against a value task instance
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTaskSource.Create">
            <summary>
            Rents a task-source that will be recycled when the task is awaited
            </summary>
        </member>
        <member name="P:PooledAwait.PooledValueTaskSource.IsValid">
            <summary>
            Test whether the source is valid
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTaskSource.TrySetResult">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTaskSource.SetResult">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTaskSource.TrySetException(System.Exception)">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTaskSource.SetException(System.Exception)">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTaskSource.TrySetCanceled">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTaskSource.SetCanceled">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="P:PooledAwait.PooledValueTaskSource.IsNull">
            <summary>
            Indicates whether this is an invalid default instance
            </summary>
        </member>
        <member name="T:PooledAwait.PooledValueTaskSource`1">
            <summary>
            A task-source that automatically recycles when the task is awaited
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTaskSource`1.Equals(System.Object)">
            <summary><see cref="M:System.Object.Equals(System.Object)"/></summary>
        </member>
        <member name="M:PooledAwait.PooledValueTaskSource`1.GetHashCode">
            <summary><see cref="M:System.Object.GetHashCode"/></summary>
        </member>
        <member name="M:PooledAwait.PooledValueTaskSource`1.ToString">
            <summary><see cref="M:System.Object.ToString"/></summary>
        </member>
        <member name="P:PooledAwait.PooledValueTaskSource`1.Task">
            <summary>
            Gets the task that corresponds to this instance; it can only be awaited once
            </summary>
        </member>
        <member name="P:PooledAwait.PooledValueTaskSource`1.HasTask">
            <summary>
            Indicates whether this instance is well-defined against a value task instance
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTaskSource`1.Create">
            <summary>
            Rents a task-source that will be recycled when the task is awaited
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTaskSource`1.#ctor(`0)">
            <summary>
            Create a new PooledValueTaskSource that will yield a constant value without ever renting/recycling any background state
            </summary>
        </member>
        <member name="P:PooledAwait.PooledValueTaskSource`1.IsValid">
            <summary>
            Test whether the source is valid
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTaskSource`1.TrySetResult(`0)">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTaskSource`1.SetResult(`0)">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTaskSource`1.TrySetException(System.Exception)">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTaskSource`1.SetException(System.Exception)">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTaskSource`1.TrySetCanceled">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTaskSource`1.SetCanceled">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="P:PooledAwait.PooledValueTaskSource`1.IsNull">
            <summary>
            Indicates whether this is an invalid default instance
            </summary>
        </member>
        <member name="T:PooledAwait.PooledValueTask`1">
            <summary>
            A ValueTask<typeparamref name="T"/> with a custom source and builder
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTask`1.Equals(System.Object)">
            <summary><see cref="M:System.Object.Equals(System.Object)"/></summary>
        </member>
        <member name="M:PooledAwait.PooledValueTask`1.GetHashCode">
            <summary><see cref="M:System.Object.GetHashCode"/></summary>
        </member>
        <member name="M:PooledAwait.PooledValueTask`1.ToString">
            <summary><see cref="M:System.Object.ToString"/></summary>
        </member>
        <member name="M:PooledAwait.PooledValueTask`1.#ctor(`0)">
            <summary>
            Creates a value-task with a fixed value
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTask`1.AsValueTask">
            <summary>
            Gets the instance as a value-task
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTask`1.op_Implicit(PooledAwait.PooledValueTask{`0}@)~System.Threading.Tasks.ValueTask{`0}">
            <summary>
            Gets the instance as a value-task
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTask`1.GetAwaiter">
            <summary>
            Gets the awaiter for the task
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTask`1.ConfigureAwait(System.Boolean)">
            <summary>
            Gets the configured awaiter for the task
            </summary>
        </member>
        <member name="M:PooledAwait.PooledValueTask`1.CreateSource">
            <summary>
            Rents a task-source that will be recycled when the task is awaited
            </summary>
        </member>
        <member name="P:PooledAwait.PooledValueTask`1.IsNull">
            <summary>
            Indicates whether this is an invalid default instance
            </summary>
        </member>
        <member name="T:PooledAwait.PoolSizeAttribute">
            <summary>
            Controls the number of elements to store in the pool
            </summary>
        </member>
        <member name="P:PooledAwait.PoolSizeAttribute.Size">
            <summary>
            The number of elements to store in the pool
            </summary>
        </member>
        <member name="M:PooledAwait.PoolSizeAttribute.#ctor(System.Int32)">
            <summary>
            Create a new PoolSizeAttribute instance
            </summary>
        </member>
        <member name="T:PooledAwait.Pool`1">
            <summary>
            A general-purpose pool of object references; it is the caller's responsibility
            to ensure that overlapped usage does not occur
            </summary>
        </member>
        <member name="M:PooledAwait.Pool`1.TryGet">
            <summary>
            Gets an instance from the pool if possible
            </summary>
        </member>
        <member name="M:PooledAwait.Pool`1.TryPut(`0)">
            <summary>
            Puts an instance back into the pool
            </summary>
        </member>
        <member name="T:PooledAwait.ValueTaskCompletionSource`1">
            <summary>
            Lightweight implementation of TaskCompletionSource<typeparamref name="T"/>
            </summary>
            <remarks>When possible, this will bypass TaskCompletionSource<typeparamref name="T"/> completely</remarks>
        </member>
        <member name="M:PooledAwait.ValueTaskCompletionSource`1.Equals(System.Object)">
            <summary><see cref="M:System.Object.Equals(System.Object)"/></summary>
        </member>
        <member name="M:PooledAwait.ValueTaskCompletionSource`1.GetHashCode">
            <summary><see cref="M:System.Object.GetHashCode"/></summary>
        </member>
        <member name="M:PooledAwait.ValueTaskCompletionSource`1.ToString">
            <summary><see cref="M:System.Object.ToString"/></summary>
        </member>
        <member name="P:PooledAwait.ValueTaskCompletionSource`1.Task">
            <summary>
            Gets the instance as a task
            </summary>
        </member>
        <member name="P:PooledAwait.ValueTaskCompletionSource`1.IsNull">
            <summary>
            Indicates whether this is an invalid default instance
            </summary>
        </member>
        <member name="M:PooledAwait.ValueTaskCompletionSource`1.Create">
            <summary>
            Create an instance pointing to a new task
            </summary>
        </member>
        <member name="M:PooledAwait.ValueTaskCompletionSource`1.TrySetException(System.Exception)">
            <summary>
            Set the outcome of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.ValueTaskCompletionSource`1.SetException(System.Exception)">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.ValueTaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)">
            <summary>
            Set the outcome of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.ValueTaskCompletionSource`1.SetCanceled(System.Threading.CancellationToken)">
            <summary>
            Set the result of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.ValueTaskCompletionSource`1.TrySetResult(`0)">
            <summary>
            Set the outcome of the operation
            </summary>
        </member>
        <member name="M:PooledAwait.ValueTaskCompletionSource`1.SetResult(`0)">
            <summary>
            Set the result of the operation
            </summary>
        </member>
    </members>
</doc>
